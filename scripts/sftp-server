#!/usr/bin/env php
<?php

ini_set('error_log', '/tmp/sftp-err');

// from http://tools.ietf.org/html/draft-ietf-secsh-filexfer-00
define('SSH_FXP_INIT', 1);
define('SSH_FXP_VERSION', 2);
define('SSH_FXP_OPEN', 3);
define('SSH_FXP_CLOSE', 4);
define('SSH_FXP_READ', 5);
define('SSH_FXP_WRITE', 6);
define('SSH_FXP_LSTAT', 7);
define('SSH_FXP_FSTAT', 8);
define('SSH_FXP_SETSTAT', 9);
define('SSH_FXP_FSETSTAT', 10);
define('SSH_FXP_OPENDIR', 11);
define('SSH_FXP_READDIR', 12);
define('SSH_FXP_REMOVE', 13);
define('SSH_FXP_MKDIR', 14);
define('SSH_FXP_RMDIR', 15);
define('SSH_FXP_REALPATH', 16);
define('SSH_FXP_STAT', 17);
define('SSH_FXP_RENAME', 18);
define('SSH_FXP_STATUS', 101);
define('SSH_FXP_HANDLE', 102);
define('SSH_FXP_DATA', 103);
define('SSH_FXP_NAME', 104);
define('SSH_FXP_ATTRS', 105);
define('SSH_FXP_EXTENDED', 200);
define('SSH_FXP_EXTENDED_REPLY', 201);

define('SSH_FILEXFER_ATTR_SIZE', 0x00000001);
define('SSH_FILEXFER_ATTR_UIDGID', 0x00000002);
define('SSH_FILEXFER_ATTR_PERMISSIONS', 0x00000004);
define('SSH_FILEXFER_ATTR_ACMODTIME', 0x00000008);
define('SSH_FILEXFER_ATTR_EXTENDED', 0x80000000);

define('SSH_FX_OK', 0);
define('SSH_FX_EOF', 1);
define('SSH_FX_NO_SUCH_FILE', 2);
define('SSH_FX_PERMISSION_DENIED', 3);
define('SSH_FX_FAILURE', 4);
define('SSH_FX_BAD_MESSAGE', 5);
define('SSH_FX_NO_CONNECTION', 6);
define('SSH_FX_CONNECTION_LOST', 7);
define('SSH_FX_OP_UNSUPPORTED', 8);


class SFTPServer
{
    protected $_handle_serial = 1;
    protected $_handle_infos = array();

    public function logger($message)
    {
        file_put_contents('/tmp/sftp-log', $message . "\n", FILE_APPEND);
    }

    public function getPermWord($perms)
    {
        // From http://tw2.php.net/manual/en/function.fileperms.php
        if (($perms & 0xC000) == 0xC000) {
            // Socket
            $info = 's';
        } elseif (($perms & 0xA000) == 0xA000) {
            // Symbolic Link
            $info = 'l';
        } elseif (($perms & 0x8000) == 0x8000) {
            // Regular
            $info = '-';
        } elseif (($perms & 0x6000) == 0x6000) {
            // Block special
            $info = 'b';
        } elseif (($perms & 0x4000) == 0x4000) {
            // Directory
            $info = 'd';
        } elseif (($perms & 0x2000) == 0x2000) {
            // Character special
            $info = 'c';
        } elseif (($perms & 0x1000) == 0x1000) {
            // FIFO pipe
            $info = 'p';
        } else {
            // Unknown
            $info = 'u';
        }

        // Owner
        $info .= (($perms & 0x0100) ? 'r' : '-');
        $info .= (($perms & 0x0080) ? 'w' : '-');
        $info .= (($perms & 0x0040) ?
            (($perms & 0x0800) ? 's' : 'x' ) :
            (($perms & 0x0800) ? 'S' : '-'));

        // Group
        $info .= (($perms & 0x0020) ? 'r' : '-');
        $info .= (($perms & 0x0010) ? 'w' : '-');
        $info .= (($perms & 0x0008) ?
            (($perms & 0x0400) ? 's' : 'x' ) :
            (($perms & 0x0400) ? 'S' : '-'));

        // World
        $info .= (($perms & 0x0004) ? 'r' : '-');
        $info .= (($perms & 0x0002) ? 'w' : '-');
        $info .= (($perms & 0x0001) ?
            (($perms & 0x0200) ? 't' : 'x' ) :
            (($perms & 0x0200) ? 'T' : '-'));

        return $info;
    }

    public function read()
    {
        $this->logger("reading...");
        while (true) {
            if (feof($this->fp)) {
                return false;
            }
            // 先取得 4 個 byte 的 packet length
            $length = fread($this->fp, 4);
            if ('' !== $length) {
                break;
            }
            usleep(1000);
        }
        $array = unpack('NLength', $length);
        $length = $array['Length'];
        if (!$length) {
            exit;
        }
        // 再來把資料取出來
        $data = fread($this->fp, $length);
        $array = unpack('CType/a*Data', $data);
        $this->logger("reading {$length} bytes, packet_type= {$array['Type']}");
        return array($array['Type'], $array['Data']);
    }

    public function send($packet_type, $data)
    {
        $data = pack('C', $packet_type) . $data;
        $length = strlen($data);
        $this->logger("sending {$length} bytes, packet_type= {$packet_type}");
        fwrite($this->output, pack('Na*', $length, $data));
    }

    public function parsePath($path)
    {
        if ($path == '/') {
            return array(null, '/');
        }

        $terms = explode('/', trim($path, '/'));
        $project = array_shift($terms);
        if (!in_array($project, $this->getProjectsByUser())) {
            throw new Exception('project not found', 404);
        }
        return array($project, '/' . implode('/', $terms));
    }

    public function getFileSize($project, $path)
    {
        return filesize('/srv/project_data/' . $project . $path);
    }

    public function getFilePermission($project, $path)
    {
        return fileperms('/srv/project_data/' . $project . $path);
    }

    public function getFileTime($project, $path)
    {
        $path = '/srv/project_data/' . $project . $path;
        return array(fileatime($path), filemtime($path));
    }

    public function getAbsolutePath($base, $dir)
    {
        if ($dir[0] == '/') {
            $terms = array();
        } else {
            $terms = ($base == '/') ? array() : explode('/', trim($base, '/'));
        }

        foreach (explode('/', trim($dir, '/')) as $term) {
            if ('.' == $term) {
                continue;
            }
            if ('..' == $term) {
                array_pop($terms);
                continue;
            }
            $terms[] = $term;
        }
        return '/' . implode('/', $terms);
    }

    public function getattrs($path, $options = array())
    {
        $full = array_key_exists('full', $options) ? intval($options['full']) : 0;
        $absolute_path = array_key_exists('absolute_path', $options) ? intval($options['absolute_path']) : 0;

        list($project, $path) = $this->parsePath($path);
        if (!file_exists("/srv/project_data/{$project}{$path}")) {
            throw new Exception("file not found", 404);
        }

        if ($full) {
            $flag = SSH_FILEXFER_ATTR_SIZE | SSH_FILEXFER_ATTR_UIDGID | SSH_FILEXFER_ATTR_PERMISSIONS | SSH_FILEXFER_ATTR_ACMODTIME;
        } else {
            $flag = 0;
        }
        $data = '';
        $data .= pack('N', $flag);
        if ($flag & SSH_FILEXFER_ATTR_SIZE) {
            if ($project) {
                $size = $this->getFileSize($project, $path);
            } else {
                $size = 0;
            }
            $data .= pack('NN', $size / 0x100000000, $size);
        }

        if ($flag & SSH_FILEXFER_ATTR_UIDGID) {
            // 這邊沒有 uid, gid 的概念
            $uid = 1000;
            $gid = 1000;
            $data .= pack('NN', $uid, $gid);
        }

        if ($flag & SSH_FILEXFER_ATTR_PERMISSIONS) {
            if ($project) {
                $permission = $this->getFilePermission($project, $path);
            } else {
                $permission = 0x4700;
            }
            $data .= pack('N', $permission);
        }

        if ($flag & SSH_FILEXFER_ATTR_ACMODTIME) {
            if ($project) {
                list($atime, $mtime) = $this->getFileTime($project, $path);
            } else {
                $atime = $mtime = strtotime('2013/1/1');
            }
            $data .= pack('NN', $atime, $mtime);
        }

        if ($flag & SSH_FILEXFER_ATTR_EXTENDED) {
            // 用不到吧...
            $data .= pack('N', 0);
        }

        return $data;
    }

    public function return_name_info($request_id, $base, $filenames, $options = array())
    {
        $full = array_key_exists('full', $options) ? intval($options['full']) : 0;
        $absolute_path = array_key_exists('absolute_path', $options) ? intval($options['absolute_path']) : 0;

        $data = pack('NN', $request_id, count($filenames));

        foreach ($filenames as $filename) {
            $path = $this->getAbsolutePath($base, $filename);
            if ($path == '/') {
                if ($absolute_path) {
                    $filename = '/';
                }
                $longname = sprintf("%10s %3d %8s %8s %-8d %12s %s", 'drwx------', 1, 'you', 'you', 4096, 'Feb 31 00:00', $filename);
            } else {
                if ($absolute_path) {
                    $filename = $path;
                }
                list($project, $project_path) = $this->parsePath($path);
                list($atime, $mtime) = $this->getFileTime($project, $project_path);
                $longname = sprintf("%10s %3d %8s %8s %-8d %12s %s", $this->getPermWord($this->getFilePermission($project, $project_path)),
                    1,
                    'you',
                    'you',
                    $this->getFileSize($project, $project_path),
                    date('M j H:i', $mtime),
                    $filename
                );
                $this->logger("filename={$filename}");
            }
            $data .= pack('Na*Na*a*',
                strlen($filename),
                $filename,
                strlen($longname),
                $longname,
                $this->getattrs($path, $options)
            );
        }
        $this->send(SSH_FXP_NAME, $data);
    }

    public function getProjectsByUser()
    {
        // TODO: implement me
        return array('matsu-tsao-127002', 'matsu-lang-307312');
    }

    public function main()
    {
        $this->logger("start");
        $this->fp = fopen('php://stdin', 'rb');
        $this->output = fopen('php://output', 'wb');
        $this->path = '/';

        while (true) {
            $ret = $this->read();
            if (false === $ret) {
                $this->logger("over");
                break;
            }
            list($type, $data) = $ret;

            switch ($type) {
            case SSH_FXP_INIT:
                $this->send(SSH_FXP_VERSION, pack('N', 3));
                break;

            case SSH_FXP_REALPATH:
                $ret = unpack('Nid/Npath_length/a*path', $data);
                $path = $this->getAbsolutePath($this->path, $ret['path']);

                $this->logger("realpath: {$ret['path']} => {$path}");

                try {
                    $this->return_name_info($ret['id'], $path, array(''), array('absolute_path' => true));
                    $this->path = $path;
                } catch (Exception $e) {
                    if ($e->getCode() == 404) {
                        $this->send(SSH_FXP_STATUS, pack('NN', $ret['id'], SSH_FX_NO_SUCH_FILE));
                    } else {
                        throw $e;
                    }
                }
                break;

            case SSH_FXP_OPENDIR:
                $ret = unpack('Nid/Npath_length/a*path', $data);
                $path = $this->getAbsolutePath($this->path, $ret['path']);
                $this->logger("opendir {$ret['path']} => {$path}");
                list($project, $project_path) = $this->parsePath($path);
                $handle = $this->_handle_serial ++;
                $infos = array();
                $infos['path'] = $path;

                if (!$project) {
                    $infos['files'] = $this->getProjectsByUser();
                } else {
                    $infos['dir'] = opendir("/srv/project_data/{$project}{$project_path}");
                }
                $this->_handle_infos[$handle] = $infos;
                $this->send(SSH_FXP_HANDLE, pack('NNa*', $ret['id'], strlen($handle), strval($handle)));
                break;

            case SSH_FXP_READDIR:
                $ret = unpack('Nid/Nhandle_length/a*handle', $data);
                $handle = $ret['handle'];

                if (!array_key_exists($handle, $this->_handle_infos)) {
                    $this->send(SSH_FXP_STATUS, pack('NN', $ret['id'], SSH_FX_FAILURE));
                    break;
                }

                if (array_key_exists('files', $this->_handle_infos[$handle])) {
                    if (0 == count($this->_handle_infos[$handle]['files'])) {
                        $this->send(SSH_FXP_STATUS, pack('NN', $ret['id'], SSH_FX_EOF));
                        break;
                    }
                    $filenames = array();
                    for ($i = 0; $i < 100 and count($this->_handle_infos[$handle]['files']); $i ++) {
                        $filenames[] = array_pop($this->_handle_infos[$handle]['files']);
                    }
                    $this->return_name_info($ret['id'], $this->_handle_infos[$handle]['path'], $filenames, array('full' => true));
                } else {
                    $filenames = array();
                    while ($dir = readdir($this->_handle_infos[$handle]['dir'])) {
                        $filenames[] = $dir;
                        if (count($filenames) >= 100) {
                            break;
                        }
                    }

                    if (!$filenames) {
                        $this->send(SSH_FXP_STATUS, pack('NN', $ret['id'], SSH_FX_EOF));
                        break;
                    }
                    $this->return_name_info($ret['id'], $this->_handle_infos[$handle]['path'], $filenames, array('full' => true));
                }

                break;

            case SSH_FXP_CLOSE:
                $ret = unpack('Nid/Nhandle_length/a*handle', $data);
                $handle = $ret['handle'];

                if (!array_key_exists($handle, $this->_handle_infos)) {
                    $this->send(SSH_FXP_STATUS, pack('NN', $ret['id'], SSH_FX_FAILURE));
                    break;
                }

                if (array_key_exists('dir', $this->_handle_infos[$handle])) {
                    closedir($this->_handle_infos[$handle]['dir']);
                }
                unset($this->_handle_infos[$handle]);
                $this->send(SSH_FXP_STATUS, pack('NN', $ret['id'], SSH_FX_OK));
                break;

            case SSH_FXP_STAT:
            case SSH_FXP_LSTAT:
                $ret = unpack('Nid/Npath_length/a*path', $data);
                $this->logger("stat {$ret['path']}");
                try {
                    $this->send(SSH_FXP_ATTRS, pack('N', $ret['id']) . $this->getattrs($ret['path'], array('full' => true)));
                } catch (Exception $e) {
                    if ($e->getCode() == 404) {
                        $this->send(SSH_FXP_STATUS, pack('NN', $ret['id'], SSH_FX_NO_SUCH_FILE));
                    } else {
                        throw $e;
                    }
                }
                break;

            default:
                $this->logger("unknown type id: {$type}");
                return;
            }
        }
    }
}

$server = new SFTPServer;
$server->main();
