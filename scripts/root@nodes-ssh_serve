#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

function error($message)
{
    error_log($message);
    die();
}

function main()
{
    if (!getenv('SSH_ORIGINAL_COMMAND')) {
        return error('There is no SSH_ORIGINAL_COMMAND env');
    }

    $command = getenv('SSH_ORIGINAL_COMMAND');
    list($method) = explode(' ', $command, 2);
    switch ($method) {
    case 'init':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            echo json_encode(array('error' => true, 'message' => 'id is not found'));
            break;
        }
        $start = microtime(true);
        $log_file = "/srv/chroot/{$id}.log";
        file_put_contents($log_file, date('c') . " [init] start\n", FILE_APPEND);
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }

        if (file_exists("/srv/chroot/{$id}.mounting")) {
            file_put_contents($log_file, date('c') . " [init] umounting\n", FILE_APPEND);
            system("umount /srv/chroot/{$id}/srv/data");
            // TODO: 要確保真的有被 umount
            unlink("/srv/chroot/{$id}.mounting");
        }

        exec("rm -rf /srv/chroot/{$id}");
        mkdir("/srv/chroot/{$id}");
        exec("tar zxf /srv/code/images/template.tgz -C /srv/chroot/{$id}");
        exec("mknod /srv/chroot/{$id}/dev/null c 1 3");
        exec("mknod /srv/chroot/{$id}/dev/random c 1 8");
        exec("mknod /srv/chroot/{$id}/dev/urandom c 1 9");
        exec("mknod /srv/chroot/{$id}/dev/stdin c 5 0");
        exec("mknod /srv/chroot/{$id}/dev/stdout c 5 1");
        exec("mknod /srv/chroot/{$id}/dev/stderr c 5 2");
        exec("chmod 666 /srv/chroot/{$id}/dev/*");
        exec("chown -R deploy:nogroup /srv/chroot/{$id}");
        exec("chmod 755 /srv/chroot/{$id}");
        if (!file_exists("/srv/chroot/{$id}/tmp")) {
            exec("mkdir /srv/chroot/{$id}/tmp");
        }
        exec("chmod 1777 /srv/chroot/{$id}/tmp");
        $port = $uid = 20000 + $id;
        exec("echo 'www-user:x:{$uid}:99::/srv/deploy:/sbin/nologin' >> /srv/chroot/{$id}/etc/passwd");
        mkdir("/srv/chroot/{$id}/srv/logs");
        exec("chown {$uid} /srv/chroot/{$id}/srv/logs");
        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [init] done(spent: {$spent})\n", FILE_APPEND);
        echo json_encode(array('error' => false, 'port' => $port));
        break;

    case 'service':
        list(, $id, $template, $option) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            die("invalid $id");
        }
        if (!file_exists('/srv/code/images/' . $template)) {
            die("template {$template} not found");
        }
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        exec("rpm --root /srv/chroot/{$id} -ivh --nodeps /srv/code/images/{$template}/*");
        if (file_exists("/srv/code/hisoku/config/rpmsource/{$template}-config")) {
            exec("cp -r /srv/code/hisoku/config/rpmsource/{$template}-config/* /srv/chroot/{$id}/");
        }
        $uid = $port = 20000 + $id;
        $option = urldecode($option);

        if (file_exists("/srv/chroot/{$id}/init.sh")) {
            exec("chroot /srv/chroot/{$id}/ /init.sh {$port} {$option}");
        }

        exec("chroot --userspec={$uid}:99 --groups=nogroup /srv/chroot/{$id}/ /start.sh {$port} {$option}");
        break;

    case 'clone':
        list(, $project_name, $id, $flag) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        $log_file = "/srv/chroot/{$id}.log";
        if (!$id) {
            die("invalid $id");
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        $template = $project->getTemplate();
        file_put_contents($log_file, date('c') . " [clone] project: {$project_name}, template: {$template}\n", FILE_APPEND);
        file_put_contents($log_file, date('c') . " [clone] init lang base\n", FILE_APPEND);
        file_put_contents("/srv/chroot/{$id}.project", $project_name);

        $lang_base_file = "/srv/code/images/lang-{$template}.tar.gz";
        if (file_exists($lang_base_file)) {
            exec("tar zxf $lang_base_file --directory /srv/chroot/{$id}/");
        } else {
            exec("dpkg --root=/srv/chroot/{$id} -i /srv/code/images/{$template}/*.deb");
        }

        if (file_exists('/srv/project_data/' . $project_name)) {
            file_put_contents($log_file, date('c') . " [clone] mounting nfs project directory\n", FILE_APPEND);
            $uid = $id + 20000;
            mkdir("/srv/chroot/{$id}/srv/data");
            system('python ' . __DIR__ . "/xmp.py -o allow_other -o root=/srv/project_data/{$project_name} -o uid={$uid} -o gid=99 /srv/chroot/{$id}/srv/data");
            touch("/srv/chroot/{$id}.mounting");
        }

        file_put_contents($log_file, date('c') . " [clone] init lang config\n", FILE_APPEND);
        exec("cp -r /srv/code/hisoku/config/rpmsource/{$template}-config/* /srv/chroot/{$id}/");
        $port = 20000 + $id;

        file_put_contents($log_file, date('c') . " [clone] init.sh\n", FILE_APPEND);
        exec("chroot /srv/chroot/{$id}/ /init.sh {$port}");
        mkdir("/srv/chroot/{$id}/srv/web");

        file_put_contents($log_file, date('c') . " [clone] pull source code\n", FILE_APPEND);
        exec("git archive --format=tar --remote=git@" . GIT_PRIVATE_SERVER . ":{$project_name}.git master | tar -xf - -C /srv/chroot/{$id}/srv/web");

        file_put_contents($log_file, date('c') . " [clone] init project base\n", FILE_APPEND);
        $tmp_name = tempnam('/tmp', '');
        exec("ssh git@" . GIT_PRIVATE_SERVER . " get-project-base " . $project_name . " > {$tmp_name}.tar.gz");
        exec("tar zxf {$tmp_name}.tar.gz -C /srv/chroot/{$id}");
        @unlink($tmp_name);
        @unlink("{$tmp_name}.tar.gz");

        file_put_contents($log_file, date('c') . " [clone] post-clone.sh\n", FILE_APPEND);
        if ('no-post-clone' != $flag and file_exists("/srv/chroot/{$id}/post-clone.sh")) {
            exec("chroot /srv/chroot/{$id}/ /post-clone.sh {$port}");
        }

        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [clone] done(spent: $spent)\n", FILE_APPEND);
        break;

    case 'restart-web':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }

        $log_file = "/srv/chroot/{$id}.log";
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }

        file_put_contents($log_file, date('c') . " [restart-web] loading project variables\n", FILE_APPEND);
        $params = array('project=' . escapeshellcmd($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellcmd($variable->key) . '=' . escapeshellarg($variable->value);
        }
        $uid = 20000 + $id;
        file_put_contents($log_file, date('c') . " [restart-web] start-web.sh\n", FILE_APPEND);
        exec("chroot --userspec={$uid}:99 --groups=nogroup /srv/chroot/{$id}/ env -i " . implode(" ", $params) . " /start-web.sh");

        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [restart-web] done(spent: $spent)\n", FILE_APPEND);
        break;

    case 'run':
        list(, $project_name, $id, $run_cmd) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $log_file = "/srv/chroot/{$id}.log";
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        file_put_contents($log_file, date('c') . " [run] run project: {$project_name} command: \"" . urldecode($run_cmd) . "\"\n", FILE_APPEND);

        file_put_contents($log_file, date('c') . " [run] loading project variables\n", FILE_APPEND);
        $params = array('project=' . escapeshellarg($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellarg($variable->key) . '=' . escapeshellarg($variable->value);
        }
        $run_cmd = 'cd /srv/web; ' . urldecode($run_cmd);

        file_put_contents($log_file, date('c') . " [run] start\n", FILE_APPEND);
        $uid = 20000 + $id;
	$cmd = "chroot --userspec={$uid}:99 --groups=nogroup /srv/chroot/{$id}/ env -i " . implode(" ", $params) . " sh -c " . escapeshellarg($run_cmd);
        passthru($cmd);
        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [run] done(spent: {$spent})\n", FILE_APPEND);
        break;

    case 'check_alive':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $uid = 20000 + $id;
        $output = trim(`ps -u {$uid} -opid | grep -v PID`);
        if ('' == $output) {
            echo json_encode(array());
            return;
        }
        $pids = explode("\n", $output);
        $jobs = array();
        foreach ($pids as $pid) {
            $pid = trim($pid);
            $job = new StdClass;
            $job->pid = $pid;
            $job->start_time = filectime("/proc/{$pid}");
            $job->comm = trim(file_get_contents("/proc/{$pid}/comm"));
            $job->cmdline = trim(file_get_contents("/proc/{$pid}/cmdline"));
            $jobs[] = $job;
        }
        echo json_encode($jobs);
        break;

    case 'shutdown':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $log_file = "/srv/chroot/{$id}.log";
        $start = microtime(true);
        file_put_contents($log_file, date('c') . " [shutdown] start\n", FILE_APPEND);

        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            file_put_contents($log_file, date('c') . " [shutdown] /shutdown.sh\n", FILE_APPEND);
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        $uid = 20000 + $id;
        $output = trim(`ps -u {$uid} -opid | grep -v PID`);
        if ('' !== trim($output)) {
            $pids = explode("\n", $output);
            file_put_contents($log_file, date('c') . " [shutdown] kill " . implode(' ' , $pids) . "\n", FILE_APPEND);
            exec("kill " . implode(' ', $pids));
        }

        if (file_exists("/srv/chroot/{$id}.mounting")) {
            file_put_contents($log_file, date('c') . " [shutdown] umounting\n", FILE_APPEND);
            system("umount /srv/chroot/{$id}/srv/data");
            // TODO: 要確保真的有被 umount
            unlink("/srv/chroot/{$id}.mounting");
        }

        file_put_contents($log_file, date('c') . " [shutdown] delete /srv/chroot/{$id}\n", FILE_APPEND);
        exec("rm -rf /srv/chroot/{$id}");

        echo json_encode(array('error' => false, 'port' => $port));
        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [shutdown] done(spent: {$spent})\n", FILE_APPEND);
        if (file_exists("/srv/chroot/{$id}.project")) {
            unlink("/srv/chroot/{$id}.project");
        }
        break;

    case 'local-build-project-base':
        list(, $template, $local_req_path) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        system("/srv/code/hisoku/scripts/build-project-base/{$template}.php " . escapeshellarg($local_req_path));
        break;

    default:
        return error('unknown command: ' . $method);
    }
    return;

}

main();
