#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

function error($message)
{
    error_log($message);
    die();
}

function main()
{
    if (!getenv('SSH_ORIGINAL_COMMAND')) {
        return error('There is no SSH_ORIGINAL_COMMAND env');
    }

    $command = getenv('SSH_ORIGINAL_COMMAND');
    list($method) = explode(' ', $command, 2);

    switch ($method) {
    case 'init':
        list(, $id, $option) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            echo json_encode(array('error' => true, 'message' => 'id is not found'));
            break;
        }
        $port = 20000 + $id;
        $start = microtime(true);
        $log_file = "/srv/chroot/{$id}.log";
        touch("/srv/chroot/{$id}.docker");
        file_put_contents($log_file, date('c') . " [init] start\n", FILE_APPEND);

        // init 在 docker 下甚麼都不用做

        $aaspent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [init] done(spent: {$spent})\n", FILE_APPEND);

        echo json_encode(array('error' => false, 'port' => $port));
        break;

    case 'clone':
        list(, $project_name, $id, $flag) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        $log_file = "/srv/chroot/{$id}.log";
        if (!$id) {
            die("invalid $id");
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        file_put_contents($log_file, date('c') . " [clone] project: {$project_name}\n", FILE_APPEND);
        file_put_contents($log_file, date('c') . " [clone] init lang base\n", FILE_APPEND);
        file_put_contents("/srv/chroot/{$id}.project", $project_name);

        $cmd = "ssh git@" . GIT_PRIVATE_SERVER . " build-docker-project-image " . $project_name;
        $build_image_result = `$cmd`;
        if (!preg_match('#success:(.*)#', $build_image_result, $matches)) {
            return error('build project base failed: ' . $project_name);
        }
        $project_base_version = $matches[1];

        $port = 20000 + $id;
        exec("docker create --publish {$port}:80 --name c-{$id} middle2 init");
        exec("docker start c-{$id}");
        exec("docker exec c-{$id} mkdir /srv/web /srv/logs/");

        if (file_exists('/srv/project_data/' . $project_name)) {
            // TODO: nfs
        }

        file_put_contents($log_file, date('c') . " [clone] pull source code\n", FILE_APPEND);
        exec("git archive --format=tar --remote=git@" . GIT_PRIVATE_SERVER . ":{$project_name}.git master | docker exec -i c-{$id} tar -xvf - -C /srv/web/");

        if ('no-project-base' != $flag and $project_base_version != 'default') {
            file_put_contents($log_file, date('c') . " [clone] init project base\n", FILE_APPEND);
            exec("ssh git@" . GIT_PRIVATE_SERVER . " get-project-docker-image {$project_name} {$project_base_version} | docker exec -i c-{$id} tar --no-same-owner -zxvf - -C /");
        }

        file_put_contents($log_file, date('c') . " [clone] post-clone.sh\n", FILE_APPEND);
        if ('no-post-clone' != $flag) {
            exec("docker exec c-{$id} /post-clone.sh {$port}");
        }


        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [clone] done(spent: $spent)\n", FILE_APPEND);
        break;

    case 'restart-web':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }

        $log_file = "/srv/chroot/{$id}.log";
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }

        file_put_contents($log_file, date('c') . " [restart-web] loading project variables\n", FILE_APPEND);
        $params = array('project=' . escapeshellcmd($project->name));
        $params[] = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
        foreach ($project->variables as $variable) {
            $params[] = escapeshellcmd($variable->key) . '=' . escapeshellarg($variable->getValue());
        }
        $uid = 20000 + $id;
        file_put_contents($log_file, date('c') . " [restart-web] start-web.sh\n", FILE_APPEND);
        system("docker exec c-{$id} env -i " . implode(" ", $params) . " /start-web.sh");

        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [restart-web] done(spent: $spent)\n", FILE_APPEND);
        break;

    case 'run':
        list(, $project_name, $id, $run_cmd) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $log_file = "/srv/chroot/{$id}.log";
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        file_put_contents($log_file, date('c') . " [run] run project: {$project_name} command: \"" . urldecode($run_cmd) . "\"\n", FILE_APPEND);

        file_put_contents($log_file, date('c') . " [run] loading project variables\n", FILE_APPEND);
        $params = array('project=' . escapeshellarg($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellarg($variable->key) . '=' . escapeshellarg($variable->getValue());
        }
        $params[] = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
        $run_cmd = 'cd /srv/web; ' . urldecode($run_cmd);

        file_put_contents($log_file, date('c') . " [run] start\n", FILE_APPEND);
        $uid = 20000 + $id;
        $cmd = "docker exec c-{$id} env -i " . implode(" ", $params) . " sh -c " . escapeshellarg($run_cmd);
        $ret = 0;
        system($cmd, $ret);
        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [run] done(spent: {$spent})\n", FILE_APPEND);
        echo "\n" . json_encode(array(
            'id' => $id,
            'code' => $ret,
            'start' => date('c', $start),
            'spent' => $spent,
        ));
        break;

    case 'check_alive':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $uid = 20000 + $id;
        $jobs = array();
        $output = trim(`docker top c-{$id} -o pid,start`);
        if (!$output) {
            echo json_encode(array());
            exit;
        }

        foreach (array_slice(explode("\n", $output), 1) as $line) {
            list($pid, $start) = preg_split("/\s+/", $line, 2);
            $jobs[$pid] = new StdClass;
            $jobs[$pid]->pid = $pid;
            $jobs[$pid]->start_time = strtotime($start);
        }
        $output = trim(`docker top c-{$id} -o pid,comm`);
        foreach (array_slice(explode("\n", $output), 1) as $line) {
            list($pid, $comm) = preg_split("/\s+/", $line, 2);
            $jobs[$pid]->comm = trim($comm);
        }
        $output = trim(`docker top c-{$id} -o pid,cmd`);
        foreach (array_slice(explode("\n", $output), 1) as $line) {
            list($pid, $cmd) = preg_split("/\s+/", $line, 2);
            $jobs[$pid]->cmdline = trim($cmd);
        }

        $jobs = array_filter($jobs, function($job){ return $job->comm != 'systemd'; });
        $jobs = array_values($jobs);
        echo json_encode($jobs);
        break;

    case 'shutdown':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $log_file = "/srv/chroot/{$id}.log";
        $start = microtime(true);
        file_put_contents($log_file, date('c') . " [shutdown] start\n", FILE_APPEND);

        file_put_contents($log_file, date('c') . " [shutdown] /shutdown.sh\n", FILE_APPEND);
        exec("docker stop c-{$id}");
        exec("docker rm c-{$id}");

        echo json_encode(array('error' => false, 'port' => $port));
        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [shutdown] done(spent: {$spent})\n", FILE_APPEND);
        if (file_exists("/srv/chroot/{$id}.project")) {
            unlink("/srv/chroot/{$id}.project");
        }
        break;

    default:
        return error('unknown command: ' . $method);
    }
    return;

}

main();
